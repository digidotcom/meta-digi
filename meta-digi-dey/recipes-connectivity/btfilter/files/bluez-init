#!/bin/sh
#===============================================================================
#
#  bluez
#
#  Copyright (C) 2012-2014 by Digi International Inc.
#  All rights reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License version 2 as published by
#  the Free Software Foundation.
#
#
#  !Description: Configure Bluetooth
#
#===============================================================================

set -e

if [ "${1}" != "start" ]; then
	exit 0
fi

SCRIPTNAME="$(basename "${0}")"

bt_init() {
	# Exit if this hardware does not support Bluetooth
	if [ "${MACHINENAME}" = "ccardimx28" ]; then
		BLUETOOTH_VARIANTS="0x02 0x03 0x10 0x11 0x12"
		MOD_VARIANT="$(cat /proc/device-tree/digi,hwid,variant 2>/dev/null || \
			       cat "/sys/kernel/${MACHINENAME}/mod_variant")"
		if ! echo "${BLUETOOTH_VARIANTS}" | grep -qs "${MOD_VARIANT}"; then
			echo "${SCRIPTNAME}: variant ${MOD_VARIANT} does not support bluetooth"
			exit
		fi
		BT_PWR_GPIO_NR="21"
	elif [ "${MACHINENAME}" = "ccimx6sbc" ]; then
		BLUETOOTH_VARIANTS="0x01 0x02 0x03 0x04 0x06 0x0b 0x11 0x12 0x13 0x16"
		MOD_VARIANT="$(cat /proc/device-tree/digi,hwid,variant)"
		if ! echo "${BLUETOOTH_VARIANTS}" | grep -qs "${MOD_VARIANT}"; then
			echo "${SCRIPTNAME}: variant ${MOD_VARIANT} does not support bluetooth"
			exit
		fi
		BT_PWR_GPIO_NR="244"
	fi

	# Use a sub-shell here to change to firmware directory
	(
		cd /lib/firmware/ar3k/1020200

		# Get MAC address from device tree or NVRAM. Use a default value it it has not been set.
		if [ -f "/proc/device-tree/bluetooth/mac-address" ]; then
			BTADDR="$(hexdump -ve '1/1 "%02X" ":"' /proc/device-tree/bluetooth/mac-address | sed 's/:$//g')"
		else
			BTADDR="$(sed -ne 's,^.*btaddr1=\([^[:blank:]]\+\)[:blank:]*.*,\1,g;T;p' /proc/cmdline)"
		fi
		if [ -z "${BTADDR}" ] || [ "${BTADDR}" = "00:00:00:00:00:00" ]; then
			BTADDR="00:04:F3:FF:FF:BB"
		fi

		# Update the MAC address file only if it has changed.
		FW_MAC="ar3kbdaddr.pst"
		[ -f "${FW_MAC}" ] && [ "$(cat ${FW_MAC})" = "${BTADDR}" ] || echo ${BTADDR} > ${FW_MAC}

		JPN_REGCODE="0x2"
		REGCODE="$(cat /proc/device-tree/digi,hwid,cert 2>/dev/null || \
			   cat "/sys/kernel/${MACHINENAME}/mod_cert")"
		BT_CLASS_LINK="PS_ASIC.pst"
		BT_CLASS_FILE="PS_ASIC_class_1.pst"
		if [ -n "${REGCODE}" ] && [ "${JPN_REGCODE}" = "${REGCODE}" ]; then
			BT_CLASS_FILE="PS_ASIC_class_2.pst"
		fi

		# Replace the configuration file if different
		if ! cmp -s ${BT_CLASS_FILE} ${BT_CLASS_LINK}; then
			ln -sf ${BT_CLASS_FILE} ${BT_CLASS_LINK}
		fi
		# Remove not used configuration and readme files
		# -- Do not quote the subcommand to avoid leading/trailing whitespace
		# -- being part of the file name.
		rm -f $(echo PS_ASIC_class_?.pst | sed -e "s,${BT_CLASS_FILE},,g") readme.txt
	)

	# Start the Bluetooth driver and daemon (D-BUS must already be running)
	RETRIES="5"
	while [ "${RETRIES}" -gt "0" ]; do
		hciattach ttyBt ath3k 4000000 1>/dev/null && break
		#
		# If hciattach fails try to recover it by toggling the GPIO
		#
		BT_PWR_L="/sys/class/gpio/gpio${BT_PWR_GPIO_NR}"
		[ -d "${BT_PWR_L}" ] || printf "%s" ${BT_PWR_GPIO_NR} > /sys/class/gpio/export
		printf out > ${BT_PWR_L}/direction && sleep .2
		printf 0 > ${BT_PWR_L}/value && sleep .2
		printf 1 > ${BT_PWR_L}/value && sleep .2
		[ -d "${BT_PWR_L}" ] && printf "%s" ${BT_PWR_GPIO_NR} > /sys/class/gpio/unexport
		RETRIES="$((RETRIES - 1))"
	done
	if [ "${RETRIES}" -eq "0" ]; then
		echo "${SCRIPTNAME}: FAILED (hciattach)"
		exit
	fi
	if ! abtfilt -b -x -s -w wlan0 1>/dev/null; then
		echo "${SCRIPTNAME}: FAILED (abtfilt)"
		exit
	fi
}

echo "Starting bluetooth services."

# Initialize driver for 'ccardimx28js'
MACHINENAME="$(cat /proc/device-tree/digi,machine,name 2>/dev/null || cat /sys/kernel/machine/name)"
[ "${MACHINENAME}" = "ccardimx28" -o "${MACHINENAME}" = "ccimx6sbc" ] && bt_init

# Run bluetooth daemon
if hciconfig hci0 up && bluetoothd; then
	:	# No-op
else
	echo "${SCRIPTNAME}: FAILED"
fi
